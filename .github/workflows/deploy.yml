name: SIRAJ v6.1 Platform - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Type check
        working-directory: frontend
        run: npm run type-check
      
      - name: Lint code
        working-directory: frontend
        run: npm run lint
      
      - name: Run tests
        working-directory: frontend
        run: npm run test -- --coverage --watchAll=false
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next

  # Backend Tests  
  test-backend:
    name: Backend API Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: siraj
          POSTGRES_PASSWORD: siraj
          POSTGRES_DB: siraj_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r backend/requirements-dev.txt
      
      - name: Run database migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql://siraj:siraj@localhost:5432/siraj_platform_test
          REDIS_HOST: localhost
        run: |
          alembic upgrade head
      
      - name: Run backend tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://siraj:siraj@localhost:5432/siraj_platform_test
          REDIS_HOST: localhost
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
          AUTH0_DOMAIN: ${{ secrets.AUTH0_TEST_DOMAIN }}
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=xml
      
      - name: Type check with mypy
        working-directory: backend
        run: python -m mypy app/
      
      - name: Check code formatting
        working-directory: backend
        run: python -m black --check .
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml

  # MCP Server Tests
  test-mcp-server:
    name: MCP Server Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: Test MCP Server
        env:
          REDIS_HOST: localhost
          BILLING_API_URL: http://localhost:8000/api/v1
          SIRAJ_API_KEY: test_key_12345
        run: |
          python -m pytest src/tests/ -v --asyncio-mode=auto

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: Run Snyk to check for vulnerabilities (Node.js)
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=frontend/package.json
      
      - name: Run Snyk Code (SAST)
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js for Lighthouse
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
      
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-mcp-server, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy Backend to Railway (Staging)
        uses: railway/railway@v2
        with:
          command: deploy --service staging-api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Deploy MCP Server to Railway (Staging)
        uses: railway/railway@v2
        with:
          command: deploy --service staging-mcp
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Deploy Frontend to Vercel (Preview)
        uses: vercel/action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: frontend
      
      - name: Run Database Migrations (Staging)
        run: |
          pip install -r requirements.txt
          cd backend && alembic upgrade head
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
      
      - name: Run Smoke Tests
        run: |
          curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
          echo "Staging deployment successful!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-mcp-server, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://siraj.linguistics.org
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy Backend to Railway (Production)
        uses: railway/railway@v2
        with:
          command: deploy --service production-api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Deploy MCP Server to Railway (Production)
        uses: railway/railway@v2
        with:
          command: deploy --service production-mcp
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Deploy Frontend to Vercel (Production)
        uses: vercel/action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: frontend
      
      - name: Run Database Migrations (Production)
        run: |
          pip install -r requirements.txt
          cd backend && alembic upgrade head
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      
      - name: Warm up Production Services
        run: |
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
          curl -f https://siraj.linguistics.org || exit 1
      
      - name: Notify Team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            SIRAJ v6.1 Platform deployed to production successfully! ðŸš€
            Frontend: https://siraj.linguistics.org
            API: ${{ secrets.PRODUCTION_API_URL }}
        if: always()

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old deployments
        run: |
          echo "Cleaning up old Railway deployments..."
          # Add cleanup logic here
      
      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { context } = require('@actions/github');
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              target_url: 'https://siraj.linguistics.org',
              description: `SIRAJ v6.1 Platform deployment ${status}`,
              context: 'ci/deployment'
            });